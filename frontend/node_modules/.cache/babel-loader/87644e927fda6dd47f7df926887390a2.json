{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kslud\\\\Documents\\\\dairyFarm\\\\frontend\\\\src\\\\screens\\\\HomeScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from 'react';\nimport axios from 'axios';\nimport logger from 'use-reducer-logger'; //used to log state changes between dispatching actions\n//import data from '../data';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Product from '../components/Product';\nimport { Helmet } from 'react-helmet-async';\nimport LoadingBox from '../components/LoadingBox';\nimport MessageBox from '../components/MessageBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = (state, action) => {\n  //current state, action that change the state and create new state\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state,\n        loading: true\n      };\n    //loading is a state , ...state return previous state values\n    //loading is true so that we can show a loading box in UI and we have kept prvious state values\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        products: action.payload,\n        loading: false\n      };\n    //previous values are kept in the state and only update products = data coming from the action\n    //data is present in action.payload ,ie, all data from backend is in action.payload\n\n    case 'FETCH_FAIL':\n      return { ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default function HomeScreen() {\n  _s();\n\n  const [{\n    loading,\n    error,\n    products\n  }, dispatch] = useReducer(logger(reducer), {\n    //logger is used to log state changes between dispatching actions\n    // we call dispatch to call an action and update the state\n    //the following is the default state\n    products: [],\n    loading: true,\n    //true because at the beginning of rendering this component products will be fetched from backend\n    //so a Loading box needs to be shown\n    error: ''\n  }); //first parameter is an object and second parameter is disptch it is used to call an action and\n  //update the state\n  //const [products, setProducts] = useState([]);\n  //useState allows to track state, state refers to data or properties that need tracking\n  //here products is a variable ,ie, current state and setProducts is a function that can update this state\n  //we have used destructuring . The initial state is empty array as indicated inside useState([]) function\n  //We can now include our state anywhere in our component.\n  //useState returns an array that contains a variable and function to update that variable\n\n  useEffect(() => {\n    const fetchData = async () => {\n      //before AJAX request we need to set loading to true\n      dispatch({\n        type: 'FETCH_REQUEST'\n      });\n\n      try {\n        const result = await axios.get('/api/products'); //this will give all products from backend\n\n        dispatch({\n          type: 'FETCH_SUCCESS',\n          payload: result.data\n        });\n      } catch (err) {\n        dispatch({\n          type: 'FETCH_FAIL',\n          payload: err.message\n        }); //err.message returns the error in javascript\n      } //setProducts(result.data); //result.data is product in the backend\n      //async function returs a promise which can be pending, fulfilled, rejected\n      //await makes a function wait for a promise\n      //axios.get sends a AJAX request to the following address and puts the result in result variable\n      //AJAX request allows to read data from web server\n\n    };\n\n    fetchData();\n  }, []); //useEffect() lets you perform side effects whenever something happens\n  //it runs every time our app location renders\n  //second parameter it takes is a dependency list , whenever they change useEffect will run\n  //the dependency array is empty because we will run the function inside useEffect only one time after\n  //rendering this component\n  //we call an api and get products from backend\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Dairy Farm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Featured Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"products\",\n      children: //INSIDE PRODUCTS DIV WE HAVE PRODUCT\n      //SINCE WE ARE INSIDE DIV WE HAVE USED CURLY BRACES\n      //convert each product to a JSX . map calls for each element\n      //and creates a new array by applying func on it once\n      //we are writing jsx which allows to write html in js\n      //map function maps custom pieces of data to each of the custom components\n      //template literals allow variables and expression in strings\n      //NOW we are doing conditional rendering\n      loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Row, {\n        children: products.map((product //here product acts like an iterator\n        ) => /*#__PURE__*/_jsxDEV(Col, {\n          sm: 6,\n          md: 4,\n          lg: 3,\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Product, {\n            product: product\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)\n        }, product.slug, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomeScreen, \"fbSlk9t/MZ3MqhDWPQgyTNEooKw=\");\n\n_c = HomeScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomeScreen\");","map":{"version":3,"names":["React","useEffect","useReducer","axios","logger","Row","Col","Product","Helmet","LoadingBox","MessageBox","reducer","state","action","type","loading","products","payload","error","HomeScreen","dispatch","fetchData","result","get","data","err","message","map","product","slug"],"sources":["C:/Users/kslud/Documents/dairyFarm/frontend/src/screens/HomeScreen.js"],"sourcesContent":["import React, { useEffect, useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport logger from 'use-reducer-logger'; //used to log state changes between dispatching actions\r\n//import data from '../data';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Product from '../components/Product';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport LoadingBox from '../components/LoadingBox';\r\nimport MessageBox from '../components/MessageBox';\r\n\r\nconst reducer = (state, action) => {\r\n  //current state, action that change the state and create new state\r\n  switch (action.type) {\r\n    case 'FETCH_REQUEST':\r\n      return { ...state, loading: true };\r\n    //loading is a state , ...state return previous state values\r\n    //loading is true so that we can show a loading box in UI and we have kept prvious state values\r\n    case 'FETCH_SUCCESS':\r\n      return { ...state, products: action.payload, loading: false };\r\n    //previous values are kept in the state and only update products = data coming from the action\r\n    //data is present in action.payload ,ie, all data from backend is in action.payload\r\n    case 'FETCH_FAIL':\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function HomeScreen() {\r\n  const [{ loading, error, products }, dispatch] = useReducer(logger(reducer), {\r\n    //logger is used to log state changes between dispatching actions\r\n    // we call dispatch to call an action and update the state\r\n    //the following is the default state\r\n    products: [],\r\n    loading: true,\r\n    //true because at the beginning of rendering this component products will be fetched from backend\r\n    //so a Loading box needs to be shown\r\n    error: '',\r\n  });\r\n  //first parameter is an object and second parameter is disptch it is used to call an action and\r\n  //update the state\r\n  //const [products, setProducts] = useState([]);\r\n  //useState allows to track state, state refers to data or properties that need tracking\r\n  //here products is a variable ,ie, current state and setProducts is a function that can update this state\r\n  //we have used destructuring . The initial state is empty array as indicated inside useState([]) function\r\n  //We can now include our state anywhere in our component.\r\n  //useState returns an array that contains a variable and function to update that variable\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      //before AJAX request we need to set loading to true\r\n      dispatch({ type: 'FETCH_REQUEST' });\r\n      try {\r\n        const result = await axios.get('/api/products'); //this will give all products from backend\r\n        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\r\n      } catch (err) {\r\n        dispatch({ type: 'FETCH_FAIL', payload: err.message });\r\n        //err.message returns the error in javascript\r\n      }\r\n\r\n      //setProducts(result.data); //result.data is product in the backend\r\n      //async function returs a promise which can be pending, fulfilled, rejected\r\n      //await makes a function wait for a promise\r\n      //axios.get sends a AJAX request to the following address and puts the result in result variable\r\n      //AJAX request allows to read data from web server\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  //useEffect() lets you perform side effects whenever something happens\r\n  //it runs every time our app location renders\r\n  //second parameter it takes is a dependency list , whenever they change useEffect will run\r\n  //the dependency array is empty because we will run the function inside useEffect only one time after\r\n  //rendering this component\r\n  //we call an api and get products from backend\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Dairy Farm</title>\r\n      </Helmet>\r\n      <h1>Featured Products</h1>\r\n      <div className=\"products\">\r\n        {\r\n          //INSIDE PRODUCTS DIV WE HAVE PRODUCT\r\n          //SINCE WE ARE INSIDE DIV WE HAVE USED CURLY BRACES\r\n          //convert each product to a JSX . map calls for each element\r\n          //and creates a new array by applying func on it once\r\n          //we are writing jsx which allows to write html in js\r\n          //map function maps custom pieces of data to each of the custom components\r\n          //template literals allow variables and expression in strings\r\n          //NOW we are doing conditional rendering\r\n          loading ? (\r\n            <LoadingBox />\r\n          ) : error ? (\r\n            <MessageBox variant=\"danger\">{error}</MessageBox>\r\n          ) : (\r\n            <Row>\r\n              {products.map(\r\n                (\r\n                  product //here product acts like an iterator\r\n                ) => (\r\n                  <Col key={product.slug} sm={6} md={4} lg={3} className=\"mb-3\">\r\n                    <Product product={product}></Product>\r\n                  </Col>\r\n                )\r\n              )}\r\n            </Row>\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}