{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kslud\\\\OneDrive\\\\Desktop\\\\project\\\\dairyFarm\\\\frontend\\\\src\\\\Store.js\",\n    _s = $RefreshSig$();\n\n//react context needs a store\nimport { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext(); //context is designed to share data tht can be considered GLOBAL for a tree of Reaact components\n//It is used when some data needs to be accessible by many componentsat different nesting levels\n\nconst initialState = {\n  //initialState is an object\n  userInfo: localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null,\n  cart: {\n    //cart iteself is an object\n    shippingAddress: localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {},\n    // paymentMethod: localStorage.getItem('paymentMethod')\n    //   ? localStorage.getItem('paymentMethod')\n    //   : '',\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) //converts string to json\n    : []\n  }\n};\n\nfunction reducer(state, action) {\n  //the first action we are implementing is add to cart\n  switch (action.type) {\n    case 'CART_ADD_ITEM':\n      //add to cart\n      const newItem = action.payload; //the item we need to add\n\n      const existItem = state.cart.cartItems.find( //if an item exists or not\n      item => item._id === newItem._id);\n      const cartItems = existItem //if we already have this item in cart we need to use map\n      ? state.cart.cartItems.map((item //we use map function on cartItems to update\n      ) => item._id === existItem._id ? newItem : item //current item with newItem thst we get from action.payload\n      ) : [...state.cart.cartItems, newItem]; //means a new item , we need to add newItem to array\n\n      localStorage.setItem('cartItems', JSON.stringify(cartItems)); //used to store in local storage so that on refresh items are present\n      //first parameter is key and second is string value to save in this key in local storage\n\n      return { ...state,\n        cart: { ...state.cart,\n          cartItems\n        }\n      };\n\n    case 'CART_REMOVE_ITEM':\n      {\n        const cartItems = state.cart.cartItems.filter(item => item._id !== action.payload._id);\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n        return { ...state,\n          cart: { ...state.cart,\n            cartItems\n          }\n        };\n      }\n\n    case 'CART_CLEAR':\n      return { ...state,\n        cart: { ...state.cart,\n          cartItems: []\n        }\n      };\n\n    case 'USER_SIGNIN':\n      return { ...state,\n        userInfo: action.payload\n      };\n    //keep previous state and update the userInfo based on the data we get from backend\n\n    case 'USER_SIGNOUT':\n      return { ...state,\n        userInfo: null,\n        cart: {\n          cartItems: [],\n          shippingAddress: {},\n          paymentMethod: ''\n        }\n      };\n\n    case 'SAVE_SHIPPING_ADDRESS':\n      return { ...state,\n        //we make change only in the cart and inside the cart only in shipping address\n        //update shipping address with data from payload\n        cart: { ...state.cart,\n          shippingAddress: action.payload\n        }\n      };\n\n    case 'SAVE_PAYMENT_METHOD':\n      return { ...state,\n        cart: { ...state.cart,\n          paymentMethod: action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n} //StoreProvider is a wrapper for our react application and paas global props to children\n//StoreProvider is a higher order function\n\n\nexport function StoreProvider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = {\n    state,\n    dispatch\n  }; //value is defined as mix of state and dispatch\n\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 10\n  }, this); //Store is coming from react Context\n  //{value} is the value we defined earlier\n  //value contains the current state in the context and the dispatch to update the state in the context\n  //render {props.children}\n}\n\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"names":["createContext","useReducer","Store","initialState","userInfo","localStorage","getItem","JSON","parse","cart","shippingAddress","cartItems","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","setItem","stringify","filter","paymentMethod","StoreProvider","props","dispatch","value","children"],"sources":["C:/Users/kslud/OneDrive/Desktop/project/dairyFarm/frontend/src/Store.js"],"sourcesContent":["//react context needs a store\r\nimport { createContext, useReducer } from 'react';\r\n\r\nexport const Store = createContext();\r\n//context is designed to share data tht can be considered GLOBAL for a tree of Reaact components\r\n//It is used when some data needs to be accessible by many componentsat different nesting levels\r\n\r\nconst initialState = {\r\n  //initialState is an object\r\n  userInfo: localStorage.getItem('userInfo')\r\n    ? JSON.parse(localStorage.getItem('userInfo'))\r\n    : null,\r\n  cart: {\r\n    //cart iteself is an object\r\n    shippingAddress: localStorage.getItem('shippingAddress')\r\n      ? JSON.parse(localStorage.getItem('shippingAddress'))\r\n      : {},\r\n\r\n    // paymentMethod: localStorage.getItem('paymentMethod')\r\n    //   ? localStorage.getItem('paymentMethod')\r\n    //   : '',\r\n\r\n    cartItems: localStorage.getItem('cartItems')\r\n      ? JSON.parse(localStorage.getItem('cartItems')) //converts string to json\r\n      : [],\r\n  },\r\n};\r\n\r\nfunction reducer(state, action) {\r\n  //the first action we are implementing is add to cart\r\n  switch (action.type) {\r\n    case 'CART_ADD_ITEM':\r\n      //add to cart\r\n\r\n      const newItem = action.payload; //the item we need to add\r\n      const existItem = state.cart.cartItems.find(\r\n        //if an item exists or not\r\n        (item) => item._id === newItem._id\r\n      );\r\n      const cartItems = existItem //if we already have this item in cart we need to use map\r\n        ? state.cart.cartItems.map(\r\n            (\r\n              item //we use map function on cartItems to update\r\n            ) => (item._id === existItem._id ? newItem : item) //current item with newItem thst we get from action.payload\r\n          )\r\n        : [...state.cart.cartItems, newItem]; //means a new item , we need to add newItem to array\r\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n      //used to store in local storage so that on refresh items are present\r\n      //first parameter is key and second is string value to save in this key in local storage\r\n      return { ...state, cart: { ...state.cart, cartItems } };\r\n\r\n    case 'CART_REMOVE_ITEM': {\r\n      const cartItems = state.cart.cartItems.filter(\r\n        (item) => item._id !== action.payload._id\r\n      );\r\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n      return { ...state, cart: { ...state.cart, cartItems } };\r\n    }\r\n    case 'CART_CLEAR':\r\n      return { ...state, cart: { ...state.cart, cartItems: [] } };\r\n    case 'USER_SIGNIN':\r\n      return { ...state, userInfo: action.payload };\r\n    //keep previous state and update the userInfo based on the data we get from backend\r\n    case 'USER_SIGNOUT':\r\n      return {\r\n        ...state,\r\n        userInfo: null,\r\n        cart: {\r\n          cartItems: [],\r\n          shippingAddress: {},\r\n          paymentMethod: '',\r\n        },\r\n      };\r\n    case 'SAVE_SHIPPING_ADDRESS':\r\n      return {\r\n        ...state,\r\n        //we make change only in the cart and inside the cart only in shipping address\r\n        //update shipping address with data from payload\r\n        cart: {\r\n          ...state.cart,\r\n          shippingAddress: action.payload,\r\n        },\r\n      };\r\n    case 'SAVE_PAYMENT_METHOD':\r\n      return {\r\n        ...state,\r\n        cart: { ...state.cart, paymentMethod: action.payload },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n//StoreProvider is a wrapper for our react application and paas global props to children\r\n//StoreProvider is a higher order function\r\nexport function StoreProvider(props) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const value = { state, dispatch }; //value is defined as mix of state and dispatch\r\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\r\n  //Store is coming from react Context\r\n  //{value} is the value we defined earlier\r\n  //value contains the current state in the context and the dispatch to update the state in the context\r\n  //render {props.children}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}