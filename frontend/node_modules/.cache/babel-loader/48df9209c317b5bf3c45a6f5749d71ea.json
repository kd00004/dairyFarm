{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kslud\\\\Documents\\\\dairyFarm\\\\frontend\\\\src\\\\Store.js\",\n    _s = $RefreshSig$();\n\n//react context needs a store\nimport { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext(); //context is designed to share data tht can be considered GLOBAL for a tree of Reaact components\n//It is used when some data needs to be accessible by many componentsat different nesting levels\n\nconst initialState = {\n  //initialState is an object\n  cart: {\n    //cart iteself is an object\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\n  }\n};\n\nfunction reducer(state, action) {\n  //the first action we are implementing is add to cart\n  switch (action.type) {\n    case 'CART_ADD_ITEM':\n      //add to cart\n      const newItem = action.payload; //the item we need to add\n\n      const existItem = state.cart.cartItems.find( //if an item exists or not\n      item => item._id === newItem._id);\n      const cartItems = existItem //if we already have this item in cart we need to use map\n      ? state.cart.cartItems.map((item //we use map function on cartItems to update\n      ) => item._id === existItem._id ? newItem : item //current item with newItem thst we get from action.payload\n      ) : [...state.cart.cartItems, newItem]; //means a new item , we need to add newItem to array\n\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\n      return { ...state,\n        cart: { ...state.cart,\n          cartItems\n        }\n      };\n\n    case 'CART_REMOVE_ITEM':\n      {\n        const cartItems = state.cart.cartItems.filter(item => item._id !== action.payload._id);\n        localStorage.setItem('cartItems', JSON.stringify(cartItems));\n        return { ...state,\n          cart: { ...state.cart,\n            cartItems\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n} //StoreProvider is a wrapper for our react application and paas global props to children\n\n\nexport function StoreProvider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = {\n    state,\n    dispatch\n  }; //value is defined as mix of state and dispatch\n\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this); //{value} is the value we defined earlier\n  //value contains the current state in the context and the dispatch to update the state in the context\n  //render {props.children}\n}\n\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"names":["createContext","useReducer","Store","initialState","cart","cartItems","localStorage","getItem","JSON","parse","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","setItem","stringify","filter","StoreProvider","props","dispatch","value","children"],"sources":["C:/Users/kslud/Documents/dairyFarm/frontend/src/Store.js"],"sourcesContent":["//react context needs a store\r\nimport { createContext, useReducer } from 'react';\r\n\r\nexport const Store = createContext();\r\n//context is designed to share data tht can be considered GLOBAL for a tree of Reaact components\r\n//It is used when some data needs to be accessible by many componentsat different nesting levels\r\n\r\nconst initialState = {\r\n  //initialState is an object\r\n  cart: {\r\n    //cart iteself is an object\r\n    cartItems: localStorage.getItem('cartItems')\r\n      ? JSON.parse(localStorage.getItem('cartItems'))\r\n      : [],\r\n  },\r\n};\r\n\r\nfunction reducer(state, action) {\r\n  //the first action we are implementing is add to cart\r\n  switch (action.type) {\r\n    case 'CART_ADD_ITEM':\r\n      //add to cart\r\n\r\n      const newItem = action.payload; //the item we need to add\r\n      const existItem = state.cart.cartItems.find(\r\n        //if an item exists or not\r\n        (item) => item._id === newItem._id\r\n      );\r\n      const cartItems = existItem //if we already have this item in cart we need to use map\r\n        ? state.cart.cartItems.map(\r\n            (\r\n              item //we use map function on cartItems to update\r\n            ) => (item._id === existItem._id ? newItem : item) //current item with newItem thst we get from action.payload\r\n          )\r\n        : [...state.cart.cartItems, newItem]; //means a new item , we need to add newItem to array\r\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n      return { ...state, cart: { ...state.cart, cartItems } };\r\n\r\n    case 'CART_REMOVE_ITEM': {\r\n      const cartItems = state.cart.cartItems.filter(\r\n        (item) => item._id !== action.payload._id\r\n      );\r\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n      return { ...state, cart: { ...state.cart, cartItems } };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n//StoreProvider is a wrapper for our react application and paas global props to children\r\nexport function StoreProvider(props) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const value = { state, dispatch }; //value is defined as mix of state and dispatch\r\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\r\n  //{value} is the value we defined earlier\r\n  //value contains the current state in the context and the dispatch to update the state in the context\r\n  //render {props.children}\r\n}\r\n"],"mappings":";;;AAAA;AACA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;;AAEA,OAAO,MAAMC,KAAK,gBAAGF,aAAa,EAA3B,C,CACP;AACA;;AAEA,MAAMG,YAAY,GAAG;EACnB;EACAC,IAAI,EAAE;IACJ;IACAC,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADO,GAEP;EAJA;AAFa,CAArB;;AAUA,SAASG,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;EAC9B;EACA,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,eAAL;MACE;MAEA,MAAMC,OAAO,GAAGF,MAAM,CAACG,OAAvB,CAHF,CAGkC;;MAChC,MAAMC,SAAS,GAAGL,KAAK,CAACP,IAAN,CAAWC,SAAX,CAAqBY,IAArB,EAChB;MACCC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,OAAO,CAACK,GAFf,CAAlB;MAIA,MAAMd,SAAS,GAAGW,SAAS,CAAC;MAAD,EACvBL,KAAK,CAACP,IAAN,CAAWC,SAAX,CAAqBe,GAArB,CACE,CACEF,IADF,CACO;MADP,KAEMA,IAAI,CAACC,GAAL,KAAaH,SAAS,CAACG,GAAvB,GAA6BL,OAA7B,GAAuCI,IAH/C,CAGqD;MAHrD,CADuB,GAMvB,CAAC,GAAGP,KAAK,CAACP,IAAN,CAAWC,SAAf,EAA0BS,OAA1B,CANJ,CARF,CAc0C;;MACxCR,YAAY,CAACe,OAAb,CAAqB,WAArB,EAAkCb,IAAI,CAACc,SAAL,CAAejB,SAAf,CAAlC;MACA,OAAO,EAAE,GAAGM,KAAL;QAAYP,IAAI,EAAE,EAAE,GAAGO,KAAK,CAACP,IAAX;UAAiBC;QAAjB;MAAlB,CAAP;;IAEF,KAAK,kBAAL;MAAyB;QACvB,MAAMA,SAAS,GAAGM,KAAK,CAACP,IAAN,CAAWC,SAAX,CAAqBkB,MAArB,CACfL,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaP,MAAM,CAACG,OAAP,CAAeI,GADtB,CAAlB;QAGAb,YAAY,CAACe,OAAb,CAAqB,WAArB,EAAkCb,IAAI,CAACc,SAAL,CAAejB,SAAf,CAAlC;QACA,OAAO,EAAE,GAAGM,KAAL;UAAYP,IAAI,EAAE,EAAE,GAAGO,KAAK,CAACP,IAAX;YAAiBC;UAAjB;QAAlB,CAAP;MACD;;IAED;MACE,OAAOM,KAAP;EA5BJ;AA8BD,C,CAED;;;AACA,OAAO,SAASa,aAAT,CAAuBC,KAAvB,EAA8B;EAAA;;EACnC,MAAM,CAACd,KAAD,EAAQe,QAAR,IAAoBzB,UAAU,CAACS,OAAD,EAAUP,YAAV,CAApC;EACA,MAAMwB,KAAK,GAAG;IAAEhB,KAAF;IAASe;EAAT,CAAd,CAFmC,CAEA;;EACnC,oBAAO,QAAC,KAAD,CAAO,QAAP;IAAgB,KAAK,EAAEC,KAAvB;IAAA,UAA+BF,KAAK,CAACG;EAArC;IAAA;IAAA;IAAA;EAAA,QAAP,CAHmC,CAInC;EACA;EACA;AACD;;GAPeJ,a;;KAAAA,a"},"metadata":{},"sourceType":"module"}